<apex:page >
    <div id="pspdfkit" style="width: 100%; height: 100vh;"></div>
    <!-- <apex:includeScript value="{!$Resource.newStaticPsPdf1}"/>  -->
    <script type="text/javascript">__sfdcSessionId = '{!$Api.Session_Id}';</script>
    <script src="../../soap/ajax/54.0/connection.js"
    type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/pspdfkit@2022.3.0/dist/pspdfkit.js"></script>
    <script type="text/javascript"> window.onload = setupPage;
    function setupPage() {
        let location = window.location.href;
        location = window.location.href.substring(location.indexOf('?id=')+4);
        let locationDemo = location.substring(0,2);
        console.log('LC:::', locationDemo); 
        var state = {
            output : document.getElementById("output"),
            startTime : new Date().getTime()};
            console.log('STATE::',state);
        var callback = {
            //call layoutResult if the request is successful
            onSuccess: layoutResults,
            //call queryFailed if the api request fails
            onFailure: queryFailed,
            source: state};
        sforce.connection.query(
            "SELECT Id, Title, FileExtension, IsMajorVersion , VersionData From contentVersion where contentDocumentId = \'" + location + "\'",
            callback);
    }
    function queryFailed(error, source) {
        source.output.innerHTML = "An error has occurred: " + error;
    }
    /**
* This method will be called when the toolkit receives a successful
* response from the server.
* @queryResult - result that server returned
* @source - state passed into the query method call.
*/
function getBase64(file) {
        return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            let result = reader.result;
            let base64 = 'base64,';
            let content = result.indexOf(base64) + base64.length;
            let fileContents = result.substring(content);
            resolve(fileContents);
        }
        reader.onerror = error => reject(error);
        });
    }

    function layoutResults(queryResult, source) { 
        if (queryResult.size > 0) {
            var pdf = "";
            var updatedFile;
            var tempInstance = null;
            var records = queryResult.getArray('records');
            console.log('records::'+ JSON.stringify(records));
            for (var i = 0; i < records.length; i++) {
                var version = records[i];
                pdf += version.VersionData ;
            }
            const baseUrl2 = 'https://cdn.jsdelivr.net/npm/pspdfkit@2022.3.0/dist/';
            console.log("BASEURL@:::", pdf);
            
                try {
                    if(tempInstance == null){
                        PSPDFKit.load({
                        baseUrl2,
                        container: "#pspdfkit",
                        document: `data:application/pdf;base64,${pdf}`,
                        })
                        .then(instance => {
                            console.log('loaded');
                            tempInstance = instance;
                        })
                        .catch(error => {
                            console.log(error);
                        });
                    }else{
                        PSPDFKit.unload(tempInstance);
                        PSPDFKit.load({
                            baseUrl,
                            container: "#pspdfkit",
                            document: `data:application/pdf;base64,${pdf}`,
                        })
                        .then(instance => {
                            tempInstance = instance;
                        })
                        .catch(error => {
                            console.log(error);
                        });
                    }
                    
                } catch (err) {
                    console.log(err);
                }
            //render the generated html string
            //source.output.innerHTML = PSPDFKit;
        }
    }
    </script>
    
    AJAX Toolkit Developer Guide Sample Visualforce Page Using the AJAX Toolkit
    <div id="output"> </div>
</apex:page>